name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  checkout:
    runs-on: ubuntu-latest

    steps:
    # Checkout the main repository including submodules
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive' # Ensure submodules are also checked out

  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the main repository including submodules
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    # Set up Node.js for the Node.js app
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Specify the version of Node.js you want to use

    # Install dependencies and run tests for Node.js app
    - name: Install Node.js dependencies
      working-directory: ./sample-nodejs
      run: |
        npm install

    - name: Run tests for Node.js
      working-directory: ./sample-nodejs
      run: |
        npm test

    # Set up PHP for the PHP app
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'  # Specify the version of PHP you want to use

    # Install dependencies for PHP app (assuming using Composer)
    - name: Install PHP dependencies
      working-directory: ./sample-php
      run: |
        composer install

    # Deploy Node.js and PHP applications to Azure AKS
    - name: Deploy to Azure AKS
      uses: azure/aks-set-context@v1
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AZURE_AKS_CLUSTER }}
        azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}

    # Build Docker images for Node.js and PHP apps
    - name: Build Docker image for Node.js
      working-directory: ./sample-nodejs
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/sample-nodejs:latest .

    - name: Build Docker image for PHP
      working-directory: ./sample-php
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/sample-php:latest .

    # Log in to Azure Container Registry (ACR)
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # Push Docker images to ACR
    - name: Push Docker image for Node.js to ACR
      run: |
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/sample-nodejs:latest

    - name: Push Docker image for PHP to ACR
      run: |
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/sample-php:latest

    # Deploy applications from ACR to Azure AKS
    - name: Deploy Node.js application to AKS
      run: |
        kubectl set image deployment/sample-nodejs sample-nodejs=${{ secrets.ACR_NAME }}.azurecr.io/sample-nodejs:latest

    - name: Deploy PHP application to AKS
      run: |
        kubectl set image deployment/sample-php sample-php=${{ secrets.ACR_NAME }}.azurecr.io/sample-php:latest

  post-deployment:
    runs-on: ubuntu-latest

    steps:
    # Wait for applications to be up and running
    - name: Wait for Node.js application to be ready
      run: |
        kubectl rollout status deployment/sample-nodejs

    - name: Wait for PHP application to be ready
      run: |
        kubectl rollout status deployment/sample-php
